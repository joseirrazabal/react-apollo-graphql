type MenuItem {
	id: ID!
	title: String!
	route: String
	order: Int
}

  type Channel {
	id: ID!
	name: String
  }
  
  input MessageInput{
	channelId: ID!
	text: String
  }
  
  type Message {
	id: ID!
	text: String
  }
  
  # Error type.
  type Error {
	key: String
	value: String
  }
  # user
  type User {
	id: String
	username: String
	createdAt: String
	modifiedAt: String
	lastLogin: String
  }
  # Role
  type Role {
	id: String
	name: String
	createdAt: String
  }
  
  # Auth type.
  type Auth {
	token: String
	user: User
	errors: [Error]
  }
  
  input ChannelsaInput {
	token: String
  }

  # This type specifies the entry points into our API
  type Query {
	channelsa(params: ChannelsaInput): [Channel]
	channel(name: String!): Channel
	getUser(id: ID!): User 
	getRole(id: ID!): Role
	loggedInUser: User
	getAllMenuItem: [MenuItem]
  }
  
  # The mutation root type, used to define all mutations
  type Mutation {
	addChannel(name: String!): Channel
	addMessage(message: MessageInput!): Message
	logUser(email: String!, password: String!): Auth
	setMenuItem(title: String!, route: String, order: Int): MenuItem
  }
  
  # The subscription root type, specifying what we can subscribe to
  type Subscription {
	channelAdded: Channel
	messageAdded(channelId: ID!): Message
  }

# schema {
# 	query: Query
# 	mutation: Mutation 
# 	subscription: Subscription
# }
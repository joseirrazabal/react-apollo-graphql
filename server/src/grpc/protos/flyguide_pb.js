/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.flyguide.Fly', null, global);
goog.exportSymbol('proto.flyguide.FlyId', null, global);
goog.exportSymbol('proto.flyguide.FlyRange', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flyguide.FlyId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flyguide.FlyId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.flyguide.FlyId.displayName = 'proto.flyguide.FlyId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flyguide.FlyId.prototype.toObject = function(opt_includeInstance) {
  return proto.flyguide.FlyId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flyguide.FlyId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyguide.FlyId.toObject = function(includeInstance, msg) {
  var f, obj = {
    nameOrigin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nameDestiny: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flyguide.FlyId}
 */
proto.flyguide.FlyId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flyguide.FlyId;
  return proto.flyguide.FlyId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flyguide.FlyId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flyguide.FlyId}
 */
proto.flyguide.FlyId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameOrigin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameDestiny(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flyguide.FlyId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flyguide.FlyId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flyguide.FlyId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyguide.FlyId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNameOrigin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNameDestiny();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name_origin = 1;
 * @return {string}
 */
proto.flyguide.FlyId.prototype.getNameOrigin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.flyguide.FlyId.prototype.setNameOrigin = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name_destiny = 2;
 * @return {string}
 */
proto.flyguide.FlyId.prototype.getNameDestiny = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.flyguide.FlyId.prototype.setNameDestiny = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flyguide.Fly = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flyguide.Fly, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.flyguide.Fly.displayName = 'proto.flyguide.Fly';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flyguide.Fly.prototype.toObject = function(opt_includeInstance) {
  return proto.flyguide.Fly.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flyguide.Fly} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyguide.Fly.toObject = function(includeInstance, msg) {
  var f, obj = {
    flyId: (f = msg.getFlyId()) && proto.flyguide.FlyId.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    flyNumber: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flyguide.Fly}
 */
proto.flyguide.Fly.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flyguide.Fly;
  return proto.flyguide.Fly.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flyguide.Fly} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flyguide.Fly}
 */
proto.flyguide.Fly.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.flyguide.FlyId;
      reader.readMessage(value,proto.flyguide.FlyId.deserializeBinaryFromReader);
      msg.setFlyId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFlyNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flyguide.Fly.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flyguide.Fly.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flyguide.Fly} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyguide.Fly.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlyId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.flyguide.FlyId.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFlyNumber();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional FlyId fly_id = 1;
 * @return {?proto.flyguide.FlyId}
 */
proto.flyguide.Fly.prototype.getFlyId = function() {
  return /** @type{?proto.flyguide.FlyId} */ (
    jspb.Message.getWrapperField(this, proto.flyguide.FlyId, 1));
};


/** @param {?proto.flyguide.FlyId|undefined} value */
proto.flyguide.Fly.prototype.setFlyId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.flyguide.Fly.prototype.clearFlyId = function() {
  this.setFlyId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.flyguide.Fly.prototype.hasFlyId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.flyguide.Fly.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.flyguide.Fly.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.flyguide.Fly.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.flyguide.Fly.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 fly_number = 4;
 * @return {number}
 */
proto.flyguide.Fly.prototype.getFlyNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.flyguide.Fly.prototype.setFlyNumber = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flyguide.FlyRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flyguide.FlyRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.flyguide.FlyRange.displayName = 'proto.flyguide.FlyRange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flyguide.FlyRange.prototype.toObject = function(opt_includeInstance) {
  return proto.flyguide.FlyRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flyguide.FlyRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyguide.FlyRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: (f = msg.getFrom()) && proto.flyguide.FlyId.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.flyguide.FlyId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flyguide.FlyRange}
 */
proto.flyguide.FlyRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flyguide.FlyRange;
  return proto.flyguide.FlyRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flyguide.FlyRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flyguide.FlyRange}
 */
proto.flyguide.FlyRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.flyguide.FlyId;
      reader.readMessage(value,proto.flyguide.FlyId.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 2:
      var value = new proto.flyguide.FlyId;
      reader.readMessage(value,proto.flyguide.FlyId.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flyguide.FlyRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flyguide.FlyRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flyguide.FlyRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyguide.FlyRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.flyguide.FlyId.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.flyguide.FlyId.serializeBinaryToWriter
    );
  }
};


/**
 * optional FlyId from = 1;
 * @return {?proto.flyguide.FlyId}
 */
proto.flyguide.FlyRange.prototype.getFrom = function() {
  return /** @type{?proto.flyguide.FlyId} */ (
    jspb.Message.getWrapperField(this, proto.flyguide.FlyId, 1));
};


/** @param {?proto.flyguide.FlyId|undefined} value */
proto.flyguide.FlyRange.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.flyguide.FlyRange.prototype.clearFrom = function() {
  this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.flyguide.FlyRange.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FlyId to = 2;
 * @return {?proto.flyguide.FlyId}
 */
proto.flyguide.FlyRange.prototype.getTo = function() {
  return /** @type{?proto.flyguide.FlyId} */ (
    jspb.Message.getWrapperField(this, proto.flyguide.FlyId, 2));
};


/** @param {?proto.flyguide.FlyId|undefined} value */
proto.flyguide.FlyRange.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.flyguide.FlyRange.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.flyguide.FlyRange.prototype.hasTo = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.flyguide);
